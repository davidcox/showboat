#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import os
import time

from showboat import (compile, deposit_skeleton, view_url, present_url,
                      serve_http)

parser = argparse.ArgumentParser(description='View a showboat presentation'
                            )
parser.add_argument('command', type=str,
                    help='the command for showboat to perform: compile | view | serve')
parser.add_argument('--copy_assets', action='store_true', default=False,
                    help='copy, rather than symlink, the assets directory')
parser.add_argument('--out_path', '-o', default='./output',
                    help='an alternative location to deposit the built presentation'
                    )
parser.add_argument('--recompile', action='store_true', default=False,
                    help='overwrite an existing compiles of the presentation')
parser.add_argument('--force', dest='recompile', action='store_true',
                    help='overwrite an existing compiles of the presentation')
parser.add_argument('--thumbs', action='store_true', default=False,
                    help='make slide thumbnails')
parser.add_argument('--src_path', default='.', help='the project path')
parser.add_argument('--alt', action='store_true', default=False,
                    help='use the alternative viewer application')
parser.add_argument('--host', default='localhost', help='host ip to serve')
parser.add_argument('--port', default='8080', help='host port to serve')
# parser.add_argument('--slide_number', default=1, help='slide to start at')

args = parser.parse_args()

index_path = os.path.abspath(os.path.expanduser(os.path.join(args.out_path,
                             'index.html')))

# index_path += '#' + args.slide_number

if args.command == 'start':
    deposit_skeleton(args.src_path)
else:

    # check if compilation is implicitly required
    # TODO: check the hash of the files to determine this
    must_compile = args.command == 'recompile' or args.recompile \
        or not os.path.exists(index_path)
    if must_compile:
        compile(args.src_path, args.out_path, copy_assets=args.copy_assets,
                build_thumbnails=args.thumbs)

    if args.command == 'recompile':
        pass

    elif args.command == 'compile':
        if not must_compile:
            print 'Compilation was not required. Use --recompile to force.'

    elif args.command == 'view':
        view_url(index_path, use_alt=args.alt)

    elif args.command == 'present':
        present_url(index_path)

    elif args.command == 'serve':

        src_path = args.src_path
        root_path = args.out_path
        if not os.path.exists(os.path.join(src_path, 'index.html')):
            src_path = os.path.join(src_path, 'output')

        with serve_http(root_path=root_path, src_path=src_path,
                        host=args.host, port=args.port):
            print(('HTTP Server launched on http://%s:%s.html. ' +
                   'Press Ctl-C to quit.') % (args.host, args.port))

            try:
                view_url('http://%s:%s/index.html' % (args.host, args.port))

                while True:
                    time.sleep(1.0)
            except KeyboardInterrupt:
                print 'Quitting...'
    else:

        raise Exception('Unknown command: %s' % args.command)
